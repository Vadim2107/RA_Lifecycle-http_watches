{"version":3,"sources":["components/Form.js","components/ButtonDel.js","components/Clock.js","components/Watches.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","form","onSubmit","onChange","className","htmlFor","id","name","value","title","placeholder","timeZone","type","onClick","ButtonDel","onRemove","Clock","state","this","timerID","setInterval","tick","clearInterval","setState","date","moment","utc","format","items","map","item","getTimeZone","slice","React","Component","Watches","useState","setForm","setItems","console","log","get","Fragment","evt","preventDefault","prevItems","nanoid","prevForm","target","checked","filter","o","tz","utcOffset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e4960ea.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Form(props) {\n    const {form, onSubmit, onChange} = props;\n    \n    return (\n        <form onSubmit={onSubmit}>        \n            <div className='form'>\n                <label htmlFor=\"title\">Название</label>\n                <input id=\"title\" name=\"title\" value={form.title} onChange={onChange} placeholder=\"Например: Moscow\" />\n            </div>\n            <div className='form'>\n                <label htmlFor=\"timeZone\">Временная зона</label>\n                <input id=\"timeZone\" name=\"timeZone\" value={form.timeZone} onChange={onChange} placeholder=\"Например: +3\" />\n            </div>\n            <button type=\"submit\" className=\"submit\" onClick={onSubmit}>Добавить</button>\n        </form>\n    );\n}\n\nexport default Form;\n","import React from 'react';\n\nfunction ButtonDel(props) {\n    return (\n        <button className=\"delete\" onClick={props.onRemove}>X</button>\n    )\n}\n\nexport default ButtonDel;\n","import React from 'react';\nimport moment from 'moment';\nimport ButtonDel from './ButtonDel';\n\nclass Clock extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        // this.state = {date: moment.utc().format()};\n        this.state = '';\n    }\n\n    // // Часы со стрелками\n    // initLocalClocks = () => {\n    //     // Узнать местное время с помощью JS\n    //     const date = this.state.date;\n    //     const seconds = date.getSeconds();\n    //     const minutes = date.getMinutes();\n    //     const hours = date.getHours();\n\n    //     // Объект, хранящий все стрелки и их углы в градусах\n    //     const hands = [\n    //         {\n    //             hand: 'hours',\n    //             angle: (hours * 30) + (minutes / 2)\n    //         },\n    //         { \n    //             hand: 'minutes',\n    //             angle: (minutes * 6)\n    //         },\n    //         {\n    //             hand: 'seconds',\n    //             angle: (seconds * 6)\n    //         }\n    //     ];\n    //     // С помощью цикла установить угол для каждой из стрелок\n    //     for (let j = 0; j < hands.length; j++) {\n    //         const elements = document.querySelectorAll('.' + hands[j].hand);\n    //         for (let k = 0; k < elements.length; k++) {\n    //             elements[k].style.webkitTransform = 'rotateZ('+ hands[j].angle +'deg)';\n    //             elements[k].style.transform = 'rotateZ('+ hands[j].angle +'deg)';\n    //             // Если это минутная стрелка, сохранить положение секундной стрелки (для дальнейшего расчета положения минутной стрелки)\n    //             if (hands[j].hand === 'minutes') {\n    //             elements[k].parentNode.setAttribute('data-second-angle', hands[j + 1].angle);\n    //             }\n    //         }\n    //     }\n    // }\n\n    // // Установка положения секундной и минутной стрелок\n    // // Нам нужно убедиться, что движение минутной стрелки происходит,\n    // // когда секундная стрелка проходит отметку \"12 часов\"\n\n    // // Установить таймаут для первого движения минутной стрелки (меньше 1 минуты),\n    // // после чего поворачивать ее каждую минуту\n\n    // setUpMinuteHands = () => {\n    //     // Вычислить, сколько секунд прошло с начала этой минуты\n    //     const containers = document.querySelectorAll('.minutes-container');\n    //     const secondAngle = containers[0].getAttribute(\"data-second-angle\");\n    //     if (secondAngle > 0) {\n    //     // Установить таймаут до конца текущей минуты, чтобы передвинуть стрелку\n    //     const delay = (((360 - secondAngle) / 6) + 0.1) * 1000;\n    //         setTimeout(function() {\n    //             this.moveMinuteHands(containers);\n    //         }, delay);\n    //     }\n    // }\n\n    // // Выполнить первый поворот минутной стрелки\n\n    // moveMinuteHands = (containers) => {\n    //     for (let i = 0; i < containers.length; i++) {\n    //     containers[i].style.webkitTransform = 'rotateZ(6deg)';\n    //     containers[i].style.transform = 'rotateZ(6deg)';\n    //     }\n    //     // После этого продолжить с интервалом в 60 секунд\n    //     setInterval(() => {\n    //         for (let i = 0; i < containers.length; i++) {\n    //             if (containers[i].angle === undefined) {\n    //                 containers[i].angle = 12;\n    //             } else {\n    //                 containers[i].angle += 6;\n    //             }\n    //             containers[i].style.webkitTransform = 'rotateZ('+ containers[i].angle +'deg)';\n    //             containers[i].style.transform = 'rotateZ('+ containers[i].angle +'deg)';\n    //         }\n    //     }, 60000);\n    // }\n\n    // Перемещение контейнера секундной стрелки\n\n    // moveSecondHands = () => {\n    //     const containers = document.querySelectorAll('.seconds-container');\n    //     setInterval(function() {\n    //         for (let i = 0; i < containers.length; i++) {\n    //         if (containers[i].angle === undefined) {\n    //             containers[i].angle = 6;\n    //         } else {\n    //             containers[i].angle += 6;\n    //         }\n    //         containers[i].style.webkitTransform = 'rotateZ('+ containers[i].angle +'deg)';\n    //         containers[i].style.transform = 'rotateZ('+ containers[i].angle +'deg)';\n    //         }\n    //     }, 1000);\n    // }\n\n    // componentDidUpdate() {\n    //     this.initLocalClocks();\n    //     // this.setUpMinuteHands();\n    //     // this.moveSecondHands();\n    // }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({            \n            date: moment.utc().format()\n        });\n    }\n\n    render() {\n        \n        return (\n            <div className=\"watches\">\n                {this.props.items.map(item =>\n                    <div className=\"clock-container\" key={item.id}>\n                        <h4>{item.title}</h4>\n                        <ButtonDel onRemove={() => this.props.onRemove(item.id)} />                        \n                        <h1>{this.props.getTimeZone(item.timeZone).slice(11, 19)}</h1>\n                        {/* <article className=\"clock\">\n                            <div className=\"hours-container\">\n                                <div className=\"hours\"></div>\n                            </div>\n                            <div className=\"minutes-container\">\n                                <div className=\"minutes\"></div>\n                            </div>\n                            <div className=\"seconds-container\">\n                                <div className=\"seconds\"></div>\n                            </div>\n                        </article> */}\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Clock;\n","import React, { useState } from 'react';\nimport Form from './Form';\nimport Clock from './Clock';\nimport { nanoid } from 'nanoid';\nimport moment from 'moment';\n\n\nfunction Watches()  {\n\n    const [form, setForm] = useState({\n        title: \"\",\n        timeZone: \"\",\n    });\n\n    const [items, setItems] = useState([])\n\n    const onSubmit = evt => {\n        evt.preventDefault();\n\n        setItems(prevItems => ([...prevItems, {\n            title: form.title,\n            timeZone: form.timeZone,\n            id: nanoid()\n        }]));\n\n        setForm(prevForm => ({...prevForm, title: \"\", timeZone: \"\"}));\n    }\n\n    const onChange = ({target}) => {\n        const name = target.name;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        setForm(prevForm => ({...prevForm, [name]: value}));\n    }\n    \n    const onRemove = (id) => {\n        setItems(prevItems => prevItems.filter(o => o.id !== id));\n    }\n\n    const getTimeZone = (tz) => {\n        const utc = tz * 60\n        const time = moment().utcOffset(utc).format();\n        return time;\n    }\n\n    console.log(moment.utc().get('hour'));\n    console.log(moment.utc().get('minute'));\n    console.log(moment.utc().get('second'));\n    console.log(moment.utc());\n\n    return (\n        <React.Fragment>\n            <Form\n                form = {form}\n                onSubmit = {onSubmit}\n                onChange = {onChange} />\n            <Clock \n                items = {items}\n                onRemove = {onRemove}\n                getTimeZone = {getTimeZone} />\n        </React.Fragment>\n    );\n}\n\nexport default Watches;\n","import React from 'react';\nimport './App.css';\nimport Watches from './components/Watches';\n\nclass App extends React.Component {  \n  \n  render() {    \n    return (\n      <React.Fragment>\n        <Watches />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}